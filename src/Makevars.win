# Use C++11 if available
CXX_STD=CXX11

PKG_LIBS = ./libuv/libuv.a ./http-parser/http_parser.o ./sha1/sha1.o ./base64/base64.o \
	-lpthread -lws2_32 -lkernel32 -lpsapi -liphlpapi -lshell32 -luserenv

PKG_CFLAGS = $(C_VISIBILITY)
PKG_CXXFLAGS = $(CXX_VISIBILITY)
PKG_CPPFLAGS += -Ilibuv/include -D_WIN32_WINNT=0x0600 -DSTRICT_R_HEADERS -Wno-deprecated

# Additional flags for libuv borrowed from libuv/Makefile.mingw
LIBUV_CFLAGS = -Iinclude -Isrc -Isrc/win -DWIN32_LEAN_AND_MEAN -D_WIN32_WINNT=0x0600

#### Debugging flags ####
# Uncomment to enable thread assertions
# PKG_CPPFLAGS += -DDEBUG_THREAD -UNDEBUG
# Uncomment to enable printing of trace() messages
# PKG_CPPFLAGS += -DDEBUG_TRACE


$(SHLIB): libuv/.libs/libuv.a http-parser/http_parser.o sha1/sha1.o base64/base64.o

libuv/m4/lt~obsolete.m4: libuv/m4/lt_obsolete.m4
	cp -p -f libuv/m4/lt_obsolete.m4 libuv/m4/lt~obsolete.m4

# Run ./configure. We need to touch various autotools-related files to avoid
# it trying to run autotools programs again. We also need to make sure
# configure is executable, because on some platforms, calling unzip() in R
# does not preserve the executable bit.
#
# It's VERY IMPORTANT that mtime(aclocal.m4) <= mtime(configure), and also
# mtime(aclocal.m4) <= mtime(Makefile.in). On some platforms, passing multiple
# files to a single touch command gives them all the same time, but on others
# (Solaris and possibly some Fedoras) the timestamps are slightly increasing
# from one to the next, i.e. the order matters. To remove this fragility, we
# use "-r aclocal.m4" to ensure that all three files are guaranteed to have
# precisely the same timestamp value.
libuv/Makefile: libuv/m4/lt~obsolete.m4
	(cd libuv \
		&& touch aclocal.m4 \
		&& touch -r aclocal.m4 configure Makefile.in \
		&& chmod +x configure \
		&& CC="$(CC)" CFLAGS="$(CFLAGS) $(LIBUV_CFLAGS) $(CPICFLAGS) $(C_VISIBILITY)" \
		   AR="$(AR)" RANLIB="$(RANLIB)" LDFLAGS="$(LDFLAGS)" ./configure --disable-dependency-tracking $(CONFIGURE_FLAGS))

libuv/.libs/libuv.a: libuv/Makefile
	$(MAKE) --directory=libuv \
		HAVE_DTRACE=0

clean:
	# $(MAKE) --directory=libuv distclean

shlib-clean: clean
